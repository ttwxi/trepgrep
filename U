 Function to perform the chosen arithmetic operation
def perform_operation(choice, num1, num2):
    if choice == 1:
        return num1 + num2
    elif choice == 2:
        return num1 - num2
    elif choice == 3:
        return num1 * num2
    elif choice == 4:
        if num2 != 0:
            return num1 / num2
        else:
            return "Error! Division by zero."
    else:
        return "Invalid choice"

# Main program
def main():
    try:
        # Reading numbers from the keyboard
        num1 = float(input("Enter the first number: "))
        num2 = float(input("Enter the second number: "))

        # Displaying the menu and reading the user's choice
        print("Choose the operation:")
        print("1. Add")
        print("2. Subtract")
        print("3. Multiply")
        print("4. Divide")
        choice = int(input("Enter your choice (1/2/3/4): "))

        # Performing the operation and displaying the result
        result = perform_operation(choice, num1, num2)
        print(f"The result is: {result}")
    except ValueError:
        print("Invalid input! Please enter numeric values.")

..
def main():
    # Sample list of strings
    strings = ["apple", "banana", "cherry", "date", "elderberry", "fig", "grape"]

    # Creating a list of tuples with the string and its length
    tuples_list = [(s, len(s)) for s in strings]

    # Sorting the list of tuples based on the length of the string
    sorted_tuples_list = sorted(tuples_list, key=lambda x: x[1])

    # Printing the sorted list of tuples
    print("Sorted list of tuples based on the length of the string:")
    for item in sorted_tuples_list:
        print(item)

if __name__ == "__main__":
    main()

if __name__ == "__main__":
    main()

//2

def is_prime(n):
    """Check if a number is prime."""
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def main():
    # Reading the range from the user
    start = int(input("Enter the start of the range: "))
    end = int(input("Enter the end of the range: "))

    # Displaying the prime numbers in the given range
    print(f"Prime numbers between {start} and {end}:")
    for num in range(start, end + 1):
        if is_prime(num):
            print(num, end=' ')

if __name__ == "__main__":
    main()
..

def main():
    # List of subject names for the 4th semester
    subjects = [
        "Mathematics IV",
        "Data Structures",
        "Computer Organization",
        "Operating Systems",
        "Database Management Systems",
        "Software Engineering",
        "Python Programming Lab",
        "Database Lab"
    ]

    # Display the list using a for loop
    print("Subjects in the 4th semester:")
    for subject in subjects:
        print(subject)
    
    # Display the 2nd and 5th element of the list
    print("\n2nd and 5th subjects in the list:")
    print(f"2nd: {subjects[1]}")
    print(f"5th: {subjects[4]}")
    
    # Display first 4 elements of the list using the range of indexes
    print("\nFirst 4 subjects in the list:")
    print(subjects[:4])
    
    # Display last 4 elements of the list using the range of negative indexes
    print("\nLast 4 subjects in the list:")
    print(subjects[-4:])
    
    # Check if "Python Programming Lab" is available in the list
    if "Python Programming Lab" in subjects:
        print("\n'Python Programming Lab' is available in the list.")
    else:
        print("\n'Python Programming Lab' is not available in the list.")
    
    # Demonstrate the working of append() function
    subjects.append("Machine Learning")
    print("\nList after appending 'Machine Learning':")
    print(subjects)
    
    # Demonstrate the working of insert() function
    subjects.insert(2, "Computer Networks")
    print("\nList after inserting 'Computer Networks' at index 2:")
    print(subjects)
    
    # Demonstrate the working of remove() function
    subjects.remove("Database Lab")
    print("\nList after removing 'Database Lab':")
    print(subjects)
    
    # Demonstrate the working of pop() function
    popped_subject = subjects.pop()
    print(f"\nList after popping the last element ('{popped_subject}'):")
    print(subjects)

if __name__ == "__main__":
    main()

//3

def add_entry(dictionary):
    word = input("Enter the word: ").strip()
    meaning = input("Enter the meaning: ").strip()
    dictionary[word] = meaning
    print(f"Added: {word} -> {meaning}")

def search_word(dictionary):
    word = input("Enter the word to search: ").strip()
    meaning = dictionary.get(word)
    if meaning:
        print(f"The meaning of '{word}' is: {meaning}")
    else:
        print(f"'{word}' not found in the dictionary.")

def find_words_with_meaning(dictionary):
    meaning = input("Enter the meaning to search for: ").strip()
    words = [word for word, word_meaning in dictionary.items() if word_meaning == meaning]
    if words:
        print(f"Words with meaning '{meaning}': {', '.join(words)}")
    else:
        print(f"No words found with meaning '{meaning}'.")

def remove_entry(dictionary):
    word = input("Enter the word to remove: ").strip()
    if word in dictionary:
        del dictionary[word]
        print(f"Removed '{word}' from the dictionary.")
    else:
        print(f"'{word}' not found in the dictionary.")

def display_all_words(dictionary):
    sorted_words = sorted(dictionary.keys())
    print("Words in the dictionary (sorted alphabetically):")
    for word in sorted_words:
        print(f"{word}: {dictionary[word]}")

def main():
    dictionary = {}
    
    while True:
        print("\nDictionary Menu:")
        print("1. Add a new entry")
        print("2. Search for a word and retrieve its meaning")
        print("3. Find words with the same meaning")
        print("4. Remove an entry")
        print("5. Display all words sorted alphabetically")
        print("6. Exit")
        
        choice = input("Enter your choice (1-6): ").strip()
        
        if choice == '1':
            add_entry(dictionary)
        elif choice == '2':
            search_word(dictionary)
        elif choice == '3':
            find_words_with_meaning(dictionary)
        elif choice == '4':
            remove_entry(dictionary)
        elif choice == '5':
            display_all_words(dictionary)
        elif choice == '6':
            print("Exiting the program. Goodbye!")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 6.")

if __name__ == "__main__":
    main()


..

def find_max_and_min(arr):
    """Find the maximum and minimum numbers in an array."""
    max_num = max(arr)
    min_num = min(arr)
    return max_num, min_num

def find_second_largest(arr):
    """Find the second largest number in an array without sorting."""
    first = second = float('-inf')
    for num in arr:
        if num > first:
            second = first
            first = num
        elif num > second and num != first:
            second = num
    return second

def main():
    # Reading array input from the user
    arr = list(map(int, input("Enter the numbers separated by space: ").split()))
    
    # Finding and displaying the maximum and minimum number in the array
    max_num, min_num = find_max_and_min(arr)
    print(f"Maximum number: {max_num}")
    print(f"Minimum number: {min_num}")

    # Finding and displaying the second largest number in the array
    second_largest = find_second_largest(arr)
    if second_largest == float('-inf'):
        print("The array does not have a second largest number.")
    else:
        print(f"Second largest number: {second_largest}")

if __name__ == "__main__":
    main()

//4
def print_items(dictionary):
    """Print all items in the dictionary."""
    print("All items in the dictionary:")
    for key, value in dictionary.items():
        print(f"{key}: {value}")

def print_keys(dictionary):
    """Print all keys in the dictionary."""
    print("All keys in the dictionary:")
    for key in dictionary.keys():
        print(key)

def print_values(dictionary):
    """Print all values in the dictionary."""
    print("All values in the dictionary:")
    for value in dictionary.values():
        print(value)

def get_password(dictionary, user):
    """Get the password of a user."""
    password = dictionary.get(user)
    if password:
        print(f"The password of '{user}' is: {password}")
    else:
        print(f"User '{user}' not found in the dictionary.")

def change_password(dictionary, user, new_password):
    """Change the password of a particular user."""
    if user in dictionary:
        dictionary[user] = new_password
        print(f"Password of '{user}' has been changed to: {new_password}")
    else:
        print(f"User '{user}' not found in the dictionary.")

def main():
    # Initialize the dictionary
    passwd = {'rahul': 'genius', 'kumar': 'smart', 'ankita': 'intelligent'}

    # Print all items in the dictionary
    print_items(passwd)
    
    # Print all keys in the dictionary
    print_keys(passwd)
    
    # Print all values in the dictionary
    print_values(passwd)
    
    # Get the password of a user
    user_to_search = 'rahul'
    get_password(passwd, user_to_search)
    
    # Change the password of a particular user
    user_to_change = 'ankita'
    new_password = 'brilliant'
    change_password(passwd, user_to_change, new_password)

    # Print all items in the dictionary again to see the changes
    print_items(passwd)

if __name__ == "__main__":
    main()

..


import re

def count_vowels_consonants_digits(text):
    # Define regular expressions for vowels, consonants, and digits
    vowels_pattern = re.compile(r'[aeiouAEIOU]')
    consonants_pattern = re.compile(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]')
    digits_pattern = re.compile(r'\d')
    
    # Find all matches for each pattern
    vowels = vowels_pattern.findall(text)
    consonants = consonants_pattern.findall(text)
    digits = digits_pattern.findall(text)
    
    # Count the occurrences
    vowels_count = len(vowels)
    consonants_count = len(consonants)
    digits_count = len(digits)
    
    return vowels_count, consonants_count, digits_count

def main():
    # Read text from the user
    text = input("Enter the text: ")
    
    # Count the occurrences of vowels, consonants, and digits
    vowels_count, consonants_count, digits_count = count_vowels_consonants_digits(text)
    
    # Display the results
    print(f"Number of vowels: {vowels_count}")
    print(f"Number of consonants: {consonants_count}")
    print(f"Number of digits: {digits_count}")

if __name__ == "__main__":
    main()


//5
def main():
    # Create a tuple
    my_tuple = ('apple', 'banana', 'cherry', 'date', 'elderberry')

    # Adding an item to a tuple (not directly possible, tuples are immutable)
    # But you can concatenate tuples to create a new tuple
    new_tuple = my_tuple + ('fig',)
    print("Tuple after adding 'fig':", new_tuple)

    # Display the length of the tuple
    print("Length of the tuple:", len(new_tuple))

    # Checking for an item in the tuple
    item_to_check = 'banana'
    if item_to_check in new_tuple:
        print(f"'{item_to_check}' is present in the tuple.")
    else:
        print(f"'{item_to_check}' is not present in the tuple.")

    # Accessing an item in the tuple by index
    index = 2
    if 0 <= index < len(new_tuple):
        print(f"Item at index {index}: {new_tuple[index]}")
    else:
        print(f"Index {index} is out of range for the tuple.")

if __name__ == "__main__":
    main()


