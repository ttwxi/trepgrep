//6
def binary_search(arr, key):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == key:
            return f"Element {key} found at index {mid}."
        elif arr[mid] < key:
            low = mid + 1
        else:
            high = mid - 1
    return f"Element {key} not found in the array."

# Example usage:
sorted_array = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
key = 11
result = binary_search(sorted_array, key)
print(result)

..

class SavingsAccount:
    def __init__(self, account_number, account_holder, initial_balance=0):
        self.account_number = account_number
        self.account_holder = account_holder
        self.balance = initial_balance

    def deposit(self, amount):
        if amount <= 0:
            raise ValueError("Deposit amount should be greater than zero.")
        self.balance += amount
        print(f"Deposit of {amount} successful. New balance: {self.balance}")

    def withdraw(self, amount):
        if amount <= 0:
            raise ValueError("Withdrawal amount should be greater than zero.")
        if amount > self.balance:
            raise ValueError("Insufficient balance. Withdrawal amount exceeds available balance.")
        self.balance -= amount
        print(f"Withdrawal of {amount} successful. New balance: {self.balance}")

    def check_balance(self):
        print(f"Current balance in account {self.account_number}: {self.balance}")

# Example usage:
try:
    # Create a savings account
    account1 = SavingsAccount("123456789", "John Doe", 1000)

    # Deposit some money
    account1.deposit(500)

    # Withdraw some money
    account1.withdraw(300)

    # Check balance
    account1.check_balance()

    # Attempt to withdraw more than available balance
    account1.withdraw(2000)

except ValueError as e:
    print(f"Error: {e}")


//7
class Stack:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def push(self, item):
        self.items.append(item)
        print(f"Pushed element {item} onto the stack.")

    def pop(self):
        if self.is_empty():
            raise IndexError("Pop from empty stack.")
        return self.items.pop()

    def peek(self):
        if self.is_empty():
            raise IndexError("Peek from empty stack.")
        return self.items[-1]

    def display(self):
        print("Stack elements:", self.items)


class Queue:
    def __init__(self):
        self.items = []

    def is_empty(self):
        return len(self.items) == 0

    def enqueue(self, item):
        self.items.append(item)
        print(f"Enqueued element {item} into the queue.")

    def dequeue(self):
        if self.is_empty():
            raise IndexError("Dequeue from empty queue.")
        return self.items.pop(0)

    def peek(self):
        if self.is_empty():
            raise IndexError("Peek from empty queue.")
        return self.items[0]

    def display(self):
        print("Queue elements:", self.items)


# Testing the classes
try:
    # Stack operations
    stack = Stack()
    stack.push(1)
    stack.push(2)
    stack.display()
    print("Peek:", stack.peek())
    print("Popped:", stack.pop())
    stack.display()

    # Queue operations
    queue = Queue()
    queue.enqueue(10)
    queue.enqueue(20)
    queue.display()
    print("Peek:", queue.peek())
    print("Dequeued:", queue.dequeue())
    queue.display()

    # Handling errors
    stack.pop()  # Trying to pop from an empty stack
    queue.dequeue()  # Trying to dequeue from an empty queue

except IndexError as e:
    print(f"Error: {e}")
..
import numpy as np

def display_operations_2d_array(arr):
    # Display original 2D array
    print("Original 2D Array:")
    print(arr)

    # Display array elements in reverse order
    print("\nArray elements in reverse order:")
    print(arr[::-1])

    # Display principal diagonal elements
    print("\nPrincipal diagonal elements:")
    print(np.diagonal(arr))

    # Sort the array in ascending order along each row
    print("\nSorted array in ascending order:")
    sorted_asc = np.sort(arr, axis=None)
    print(sorted_asc)

    # Sort the array in descending order along each row
    print("\nSorted array in descending order:")
    sorted_desc = np.sort(arr, axis=None)[::-1]
    print(sorted_desc)

# Example usage:
if __name__ == "__main__":
    # Creating a sample 2D array
    array_2d = np.array([[1, 2, 3],
                         [4, 5, 6],
                         [7, 8, 9]])

    # Performing operations on the array
    display_operations_2d_array(array_2d)
//8

import random

# Function to generate 20 random numbers
def generate_random_numbers(n):
    return [random.randint(1, 100) for _ in range(n)]

# Function to filter odd numbers of length 2 and 4
def filter_odd_numbers(numbers):
    return [num for num in numbers if num % 2 != 0 and len(str(num)) in [2, 4]]

# Generate 20 random numbers
random_numbers = generate_random_numbers(20)
print("Generated Random Numbers:")
print(random_numbers)

# Filter odd numbers of length 2 and 4
filtered_odd_numbers = filter_odd_numbers(random_numbers)
print("\nFiltered Odd Numbers of Length 2 and 4:")
print(filtered_odd_numbers)

..
def create_text_file(filename):
    with open(filename, 'w') as file:
        print("Enter 5-6 lines of text (press Enter after each line):")
        for _ in range(5):
            line = input()
            file.write(line + '\n')

def count_upper_lower_digits(filename):
    upper_count = 0
    lower_count = 0
    digit_count = 0

    with open(filename, 'r') as file:
        content = file.read()
        for char in content:
            if char.isupper():
                upper_count += 1
            elif char.islower():
                lower_count += 1
            elif char.isdigit():
                digit_count += 1

    return upper_count, lower_count, digit_count

# Main program
if __name__ == "__main__":
    filename = "text_file.txt"

    # Create the text file and input lines
    create_text_file(filename)
    print("\nText file created and lines added successfully.")

    # Count upper, lower, and digit characters
    upper_count, lower_count, digit_count = count_upper_lower_digits(filename)

    # Display details
    print("\nDetails of the file:")
    print(f"Number of uppercase letters: {upper_count}")
    print(f"Number of lowercase letters: {lower_count}")
    print(f"Number of digits: {digit_count}")
//9
import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
def load_dataset(filename):
    return pd.read_csv(filename)

# Visualize the dataset using plot()
def visualize_dataset(df):
    df.plot()
    plt.title("Dataset Visualization")
    plt.xlabel("Index")
    plt.ylabel("Values")
    plt.show()

# Draw scatter plot for the dataset on any column
def draw_scatter_plot(df, x_col, y_col):
    plt.scatter(df[x_col], df[y_col])
    plt.title(f"Scatter Plot: {x_col} vs {y_col}")
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.show()

# Display scatter plot with different colors
def scatter_plot_with_colors(df, x_col, y_col, color_col):
    colors = df[color_col]
    plt.scatter(df[x_col], df[y_col], c=colors, cmap='viridis')
    plt.title(f"Scatter Plot with Colors: {x_col} vs {y_col}")
    plt.xlabel(x_col)
    plt.ylabel(y_col)
    plt.colorbar(label=color_col)
    plt.show()

# Draw histogram for the dataset on any column
def draw_histogram(df, col):
    df[col].plot(kind='hist', bins=20, edgecolor='black')
    plt.title(f"Histogram of {col}")
    plt.xlabel(col)
    plt.ylabel("Frequency")
    plt.show()

# Main program
if __name__ == "__main__":
    # Replace 'your_dataset.csv' with your actual dataset file
    filename = 'your_dataset.csv'
    df = load_dataset(filename)
    
    # Visualize the dataset
    visualize_dataset(df)

    # Draw scatter plot for specified columns
    draw_scatter_plot(df, 'column1', 'column2')

    # Display scatter plot with different colors based on another column
    scatter_plot_with_colors(df, 'column1', 'column2', 'color_column')

    # Draw histogram for a specified column
    draw_histogram(df, 'column1')


..





